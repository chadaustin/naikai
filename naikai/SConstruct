from SCons.Builder import Builder
import SCons.Scanner
import SCons.Util
import os
from os import path
import sys
import re
import copy


### LOAD BUILD CONFIGURATION ###

try:
    BUILD_RC = os.environ['NAIKAI_BUILD_CFG']
except:
    BUILD_RC = path.join(os.environ['HOME'], 'naikai_build')

try:
    execfile(BUILD_RC)
except:
    print "Can't open build configuration file!"
    print "Set NAIKAI_BUILD_CFG or put a configuration file in"
    print "$HOME/naikai_build."
    sys.exit()

# make sure we have all of the necessary variables
try:
    NK_MOZ_DIST
    NK_MOZ_DIST_BIN
except:
    print "NK_MOZ_DIST or NK_MOZ_DIST_BIN were not set!  You must set them"
    print "in the build configuration file!"
    sys.exit()


### BUILD VARIABLES ###

# build/dist directory
BUILD = 'build'
MODULES = [ 'base', 'nrun', 'test', 'windowing' ]


XPIDL_COMMAND = 'xpidl -I ' + path.join(NK_MOZ_DIST, 'idl') + ' $IDL_INCLUDE'

# set default target
Default(BUILD)

MOZ_INCLUDE = reduce(
  lambda a, b: a + '-I ' + path.join(NK_MOZ_DIST, 'include', b) + ' ',
  ['xpcom', 'nspr', 'string'], '')


### BUILDERS ###

Builders = [
    Builder(
        name = 'TypeLibrary',
        action = XPIDL_COMMAND + ' -m typelib -e $TARGET $SOURCES'),
    Builder(
        name = 'InterfaceHeader',
        action = XPIDL_COMMAND + ' -m header -e $TARGET $SOURCES'),
    Builder(
        name = 'Object',
        action = 'CL /nologo /c /DXP_WIN /DXP_WIN32 /MT /GX /O2 ' +
                 MOZ_INCLUDE + ' $INCLUDE /Fo$TARGET $SOURCES'),
    Builder(
	name = 'Program',
        action = 'LINK /nologo /LIBPATH:$LIBPATH ' +
                 '/out:$TARGET $SOURCES $LIBRARIES'),
    Builder(
	name = 'Component',
	action = 'LINK /nologo /LIBPATH:$LIBPATH /DLL ' +
                 '/out:$TARGET $SOURCES $LIBRARIES'),
]


### CUSTOM SCANNERS ###
### shamelessly ripped from SCons/Scanner/C.py (but modified!) ###

angle_re = re.compile('^[ \t]*#[ \t]*include[ \t]+<([\\w./\\\\]+)>', re.M)
quote_re = re.compile('^[ \t]*#[ \t]*include[ \t]+"([\\w./\\\\]+)"', re.M)

def CScan(fs = SCons.Node.FS.default_fs):
    cs = CScanner(scan, "CScan", [fs, ()],
                  [".c", ".C", ".cxx", ".cpp", ".c++",
                   ".h", ".H", ".hxx", ".hpp"])
    cs.fs = fs
    return cs

class CScanner(SCons.Scanner.Recursive):
    def __init__(self, *args, **kw):
        apply(SCons.Scanner.Recursive.__init__, (self,) + args, kw)
        self.hash = None
        self.pathscanners = {}

    def instance(self, env):
	try:
            dirs = tuple(SCons.Util.scons_str2nodes(env.Dictionary('CPPPATH'),
                                                    self.fs.Dir))
        except:
            dirs = ()
        if not self.pathscanners.has_key(dirs):
            clone = copy.copy(self)
            clone.hash = dirs
            clone.argument = [self.fs, dirs]	# XXX reaching into object
            self.pathscanners[dirs] = clone
        return self.pathscanners[dirs]

    def __hash__(self):
        return hash(self.hash)

def scan(filename, env, args = [SCons.Node.FS.default_fs, ()]):

    fs, cpppath = args

    if fs.File(filename, fs.Top).exists():
        file = open(filename)
        contents = file.read()
        file.close()

        angle_includes = angle_re.findall(contents)
        quote_includes = quote_re.findall(contents)

	iface_h = env.Dictionary()['INTERFACE_HEADERS']
	for i in angle_includes + quote_includes:
	    if iface_h.has_key(i):
		env.Depends(filename, iface_h[i])

        dir = path.dirname(filename)
        if dir:
            source_dir = (fs.Dir(dir, fs.Top),)
        else:
            source_dir = ( fs.Top, )

        return (SCons.Util.find_files(angle_includes, cpppath + source_dir,
                                      fs.File)
                + SCons.Util.find_files(quote_includes, source_dir + cpppath,
                                        fs.File))
    return []

# same as |scan|, but returns a list of filenames
def do_scan(filename, env, args = [SCons.Node.FS.default_fs, ()]):

    fs, cpppath = args

    if fs.File(filename, fs.Top).exists():
        file = open(filename)
        contents = file.read()
        file.close()

        angle_includes = angle_re.findall(contents)
        quote_includes = quote_re.findall(contents)

	return angle_includes + quote_includes;

    return []



# create an environment
env = Environment(
    ENV = os.environ,
    BUILDERS = Builders,
    SCANNERS = [CScan()],
    LIBPATH = path.join(NK_MOZ_DIST_BIN, 'lib'))


MODULE_INFO = {}

  # map 'nkIInterface.idl' to 'module/idl/nkIInterface.idl'
INTERFACES = {}

  # map 'nkIInterface.h' to 'build/include/module/nkIInterface.h'
INTERFACE_HEADERS = {}

  # map 'nkIInterface.idl' to 'build/include/module/nkIInterface.h'
GEN_INTERFACES = {}


# load each module, building a module info database
for m in MODULES:
    try:
	# defaults
	REQUIRES   = []
	IDL_FILES  = []
	PROGRAMS   = []
	COMPONENTS = []

	execfile(path.join(m, 'module.py'), locals())

	MODULE_INFO[m] = {
	    'requires':   REQUIRES + [m],  # all modules require themselves
            'idl_files':  IDL_FILES,
            'programs':   PROGRAMS,
            'components': COMPONENTS
	}

	for i in IDL_FILES:
	    idl = i + '.idl'
            h   = i + '.h'
	    INTERFACES[idl] = path.join(m, 'idl', idl)
	    INTERFACE_HEADERS[h] = path.join(BUILD, 'include', m, h)
	    GEN_INTERFACES[idl] = path.join(BUILD, 'include', m, h)

    except:
	print "Skipping module: " + m


### BUILD DEPENDENCY TREE ###

for m in MODULES:
    mi = MODULE_INFO[m]
    REQUIRES   = mi['requires']
    IDL_FILES  = mi['idl_files']
    PROGRAMS   = mi['programs']
    COMPONENTS = mi['components']

    idl_include = ''
    include = ''
    for r in REQUIRES:
	idl_include += '-I ' + path.join(r, 'idl') + ' '
	include += '-I ' + path.join(BUILD, 'include', r) + ' '

    # clone the environment for each module so we can make REQUIRES do its
    #job
    e = env.Copy(
	INTERFACE_HEADERS = INTERFACE_HEADERS,
	INCLUDE = include,
	IDL_INCLUDE = idl_include,
	LIBRARIES = 'xpcom.lib user32.lib')


    # explicit custom dependency scanner...
    def explicit_scan(file, env, deplist):
	deps = do_scan(file, env)
	for i in deps:
	    for d in deplist:
		if d.has_key(i):
		    env.Depends(file, d[i])


    # compile (type libraries)/(header files)
    for i in IDL_FILES:
	idl_file = path.join(m, 'idl', i + '.idl')

	# manually scan IDL files for dependencies and explicitly add them
	explicit_scan(idl_file, e, [INTERFACES, GEN_INTERFACES])

	e.TypeLibrary(
	    target = path.join(BUILD, 'bin', 'components', i + '.xpt'),
	    source = idl_file)
	e.InterfaceHeader(
	    target = path.join(BUILD, 'include', m, i + '.h'),
	    source = idl_file)

    # build module programs
    for i in PROGRAMS:
	target = i['target'] + '.exe'

	objects = []
	for s in i['sources']:
	    source = path.join(m, 'src', s + '.cpp')

	    o = path.join(BUILD, 'obj', s + '.obj')
	    e.Object(target = o, source = source)
	    objects.append(o)

	e.Program(target = path.join(BUILD, 'bin', target),
		  source = objects)

    # build module components
    for i in COMPONENTS:
	target = i['target'] + '.dll'

	srcdir = 'src'
	if i.has_key('srcdir'):
	    srcdir = i['srcdir']

	objects = []
	for s in i['sources']:
	    source = path.join(m, srcdir, s + '.cpp')

	    o = path.join(BUILD, 'obj', s + '.obj')
	    e.Object(target = o, source = source)
	    objects.append(o)

	e.Component(
	    target = path.join(BUILD, 'bin', 'components', target),
	    source = objects)
